
bc.start=start
bg.repeat_control=repeat between
bg.repeat_control.description=Repeat the commands with "variable" ranging between "start" and "stop" values. "variable" changes by "increment" after each repetition
bc.end=stop
bc.increment=steps of
bg.constrain=constrain
bc.low=lower
bc.high=higher
bg.sd_write2=write to SD
bg.sd_write=SD flash write
bg.sd_write_number=SD write number
bg.sd_write_number_int=SD write number Int
bg.sd_return=Return
bg.sd_no_return=No return
bg.eeprom_read=read 'byte' EEPROM
bg.eeprom_write=write 'byte' EEPROM
bg.eeprom_read_int=read number from EEPROM
bg.eeprom_write_int=write number to EEPROM
bg.eeprom_read_long=read 'long' from EEPROM
bg.eeprom_write_long=write 'long' to EEPROM
bd.storage=Storage
bc.device_address=device address
bc.device_address_I2C=address 0x
bc.register_address=register address
bc.watchdog_enable=enable
bc.eeprom_address=address
bc.eeprom_data=data
bc.ln=new line
bc.message=message2
bc.print=print
bc.line_number=line#
bc.character_number=char#


bg.variable_poly=char variable name
bg.setter_variable_char=set char variable
bg.char=A
bd.chars= Chars Test
bg.not_equal_poly= !=
bg.equal_poly= ==
bg.glue_poly=glue
bg.serial_read_poly=serial read
bg.serial_available=serial data available
bg.program=program
bc.setup=setup
bc.loop=loop
bg.setup=setup
bc.par=input
bc.vecsize=size
bc.num=#
bg.variable_fake=fake
bg.fake=fake
bg.variable_vector=array variable name
bc.position=position
bg.create_variable_vector=create an array
bg.setter_variable_vector=set an array member

bg.code_head=add code on Head
bg.code_setup=add code on Setup
bg.code_loop=add code on Loop
bg.serial_read=serial read
bd.especial=Especial
bg.equal_digital===
bg.not_equal_digital=!=
bg.repeat=repeat
bc.var=iteration variable name
bg.glue_msg=glue

# BlockDrawer name
bc.angle=angle
bc.base=base
bc.condition=test
bc.else=else
bc.exponent=exponent
bc.from=from
bc.level=level
bc.max=max
bc.min=min
bc.microseconds=microseconds
bc.milliseconds=milliseconds
# BlockConnector label
bc.pin_number=pin#
bc.status=status
bc.test=test
bc.then=then
bc.to=to
bc.value=value
bc.variable=variable
bc.frequency=frequency
bc.do=do
bc.device_address=device address
bc.register_address=register address
bc.watchdog_enable=Enable
bc.eeprom_address=address
bc.eeprom_data=data
bc.motor_channel=motor channel
bc.motor_speed=motor speed

bd.control=Control
bd.number=Variables/Constants
bd.operators=Math Operators
bd.pins=Advanced (Pins)

bd.communication=Communication
bd.storage=Storage

bd.utilities=Generic Hardware

# BlockGenus initlabel
bg.abs=abs
bg.addition=+
bg.and=and
bg.cos=cos
bg.delay=delay MILLIS
bg.delay_microseconds=delay MICROS

bg.digital-high=HIGH
bg.digital-low=LOW
bg.digital-off=OFF
bg.digital-on=ON
bg.division=\u00f7
bg.equal===
bg.false=FALSE
bg.glue_sb=glue
bg.glue_sn=glue
bg.dummy=dummy
bg.greater=>
bg.greater_equal=>=
bg.if=if
bg.ifelse=if/else
bg.less=<
bg.less_equal=<=
bg.loop=loop
bg.subroutine=subroutine
bg.subroutine-ref=subroutine
bg.map=map
bg.map_common=map [0, 1024] to [0, 255]
bg.max=max
bg.message=message
bg.millis=millis
bg.min=min
bg.modulo=%
bg.multiplication=x
bg.not=not
bg.not_equal=!=
bg.char=A
bg.number=1
bg.number_long=1000000
bg.number_double=3.1415927
bg.number-single=1
bg.number-single-I2C-address=3F
bg.number-single-fixed-parallel=Parallel
bg.or=or
bg.pin-read-analog=analog pin
bg.pin-read-digital=digital pin
bg.pin-read-digital-pullup=input pullup
bg.pin-write-analog=set analog pin
bg.pin-write-digital=set digital pin
bg.pow=power
bg.random=random
bg.repeat_times=repeat
bg.watchdog_15ms=WDTO_15MS
bg.watchdog_30ms=WDTO_30MS
bg.watchdog_60ms=WDTO_60MS
bg.watchdog_120ms=WDTO_120MS
bg.watchdog_250ms=WDTO_250MS
bg.watchdog_500ms=WDTO_500MS
bg.watchdog_1s=WDTO_1S
bg.watchdog_2s=WDTO_2S
bg.watchdog_4s=WDTO_4S
bg.watchdog_8s=WDTO_8S
bg.watchdog_setup=Watchdog
bg.watchdog_reset=Watchdog Reset
bg.sd_write=SD flash write
bg.sd_write_number=SD write number
bg.sd_write_number_int=SD write number Int
bg.sd_return=Return
bg.sd_no_return=No return
bg.eeprom_read=read byte from EEPROM
bg.eeprom_write=write byte to EEPROM
bg.random_range=random

bg.serial_println=serial println
bg.serial_print=serial print
bg.serial_read=serial read
bg.equal_digital===
bg.not_equal_digital=!=
bg.repeat=repeat and count
bg.glue_msg=glue message
bg.servo=Servo
bg.servo_prefix=Servo: 
bg.servo_default=Default
bg.servo_sg90=SG90
bg.servo_mg996r=MG996R
bg.setter_variable_digital=set digital variable
bg.setter_variable_number=set integer variable
bg.setter_variable_number_unsigned_long=set large integer variable
bg.setter_variable_number_double=set decimal number variable
bg.sin=sin
bg.sqrt=sqrt
bg.subtraction=-
bg.tan=tan
bg.true=TRUE
bg.ultrasonic=ultrasonic
bg.LCD_I2C_Sainsmart_20by4=20by4 I2C  Sainsmart
bg.LCD_I2C_Sainsmart_16by2=16by2 I2C  Sainsmart
bg.LCD_PLL_Sainsmart_16by2=16by2 PLL Sainsmart
bg.LCD_command_clear=CLEAR
bg.LCD_command_home=HOME
bg.LCD_command_lightOn=Light On
bg.LCD_command_lightOff=Light Off
bg.LCD_command_cursorOn= Cursor On
bg.LCD_command_cursorOff=Cursor Off
bg.LCD_command_blinkOn= Blink On
bg.LCD_command_blinkOff=Blink Off
bg.variable_digital=digital variable name
bg.variable_number=integer variable name
bg.variable_number_unsigned_long=Large integer variable name
bg.variable_number_double='Decimal' variable name
bg.while=while
bg.do_while=do while
bg.wire_isread=read I2C ok?
bg.wire_read=read from I2C
bg.wire_write=write to I2C
bg.wire_write_one_byte=I2C write 1
bg.no_tone=no tone
bg.code_loop=loop
bg.code_head=head
bg.code_setup=setup

bd.logic=Tests
bd.communication=Communication
bd.especial=Code Blocks

ardublock.file.suffix=Ardublock Program File(*.abp)
ardublock.ui.new=New
ardublock.ui.save=Save
ardublock.ui.saveAs=Save As
ardublock.ui.load=Open
ardublock.ui.upload=Upload to Arduino
ardublock.ui.clone=Clone
ardublock.ui.add_comment=Add Comment
ardublock.ui.delete_comment=Delete Comment
ardublock.ui.organize_blocks=Organize all blocks
ardublock.ui.create_refer=create reference
ardublock.ui.website=Go to Web Site
ardublock.ui.serialMonitor=Serial Monitor
ardublock.ui.saveImage=Save as image...
ardublock.ui.version=20131031 (beta)

ardublock.error_msg.digital_var_slot=Digital variable slot must take a 'digital variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.number_var_slot=Standard variable slot must take a standard 'Integer' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.long_number_var_slot=Large integer variable slot must take a 'Large Integer' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.double_number_var_slot=variable slot must take a 'Decimal' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.char_var_slot=Char variable slot must take a char variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_var_slot='Array variable' slot must take an 'array variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_size_slot='Array size' slot must take a standard integer constant

ardublock.translator.exception.subroutineNameDuplicated=two or more subroutines have the same name!
ardublock.translator.exception.noLoopFound=No loop found!
ardublock.translator.exception.multipleLoopFound=multiple loop block found!
ardublock.translator.exception.socketNull=A required Value, Variable Name or 'Test' is missing.\nHint: Look for an empty 'socket' in the highlighted block.
ardublock.translator.exception.subroutineNotDeclared=subroutine not declared
ardublock.translator.exception.invalidPin=Invalid pin used in block.\n\nHint: If you are using a built-in peripheral, please use the ECS blocks.\nIf not, please use the shield's free pins (Pins 18-23).\n\nNote: Advanced (Pins) menu is for students adding additional peripherals.
ardublock.translator.exception.invalidNote=Unrecognized note used in block.\n\nHint: Please ask your teacher for a list of available note names.
ardublock.translator.exception.invalidKey=Unrecognized key used in block.\n\nHint: Valid keys are a-z and 0-9.
ardublock.translator.exception.invalidButton=Invalid button used in block.\n\nHint: Valid button numbers are 1-4.

message.title.error=Error
message.title.question=Question
message.content.open_unsaved=Ardublock program has changed, do you want to save?
message.content.overwrite=Do you want overwrite existing file?
message.file_not_found=File Not Found or Permission Denied
message.question.newfile_on_workspace_changed=The program has changed, do you want to create a new Ardublock file?

bc.repeat_times=times

# Descriptions of all Block

bg.program.description=Main program with loop and setup
bg.loop.description=Main Program loop without setup
bg.delay.description=Delay for "milliseconds" indicated.\nNOTE: 1000 millis = 1 second
bg.if.description=Execute the commands if the "test" is true
bg.ifelse.description=Execute the first set of commands if the "test" is true, otherwise it will do the second set of commands.
bg.while.description=Execute the commands as long as the "test" is true
bg.do_while.description=Execute the list of commands. Then, if 'test' is true, keep on repeating it until 'test' is 'false'
bg.repeat_times.description=Repeat the commands. Stop after "times" repetitions.
bg.repeat.description=Repeat the commands. Stop after "times" repetitions. "variable" counts the repetitions. 
bg.subroutine.description=Add a subroutine
bg.subroutine-ref.description=Invoke subroutine
bg.delay_microseconds.description=Delay for "microseconds" indicated. \nNOTE: 1000000 micros = 1 second
bg.pin-read-analog.description=Read analog value from pin
bg.pin-read-digital.description=Read digital value from pin
bg.pin-read-digital-pullup.description=set digital pin with internal pullup
bg.pin-write-digital.description=write digital to pin
bg.pin-write-analog.description=write analog to pin
bg.addition.description=Sum of two numbers
bg.subtraction.description=Difference of two numbers
bg.multiplication.description=Product of two numbers
bg.division.description=Quotient of two numbers
bg.random.description=Generate a random number less than the number
bg.map_common.description=map value from [0, 1023] to [0, 255]
bg.map.description=Map value from "from" range to "to" range
bg.constrain.description=Constrain a number between two values
bg.dummy.description=
bg.greater.description=True if the first number is greater the second number
bg.less.description=True if the first number is less then the second number
bg.equal.description=True if the first number equals to the scond number
bg.equal_digital.description=True if the first number equals to the scond number
bg.greater_equal.description=True if the first number is greater or equal to the second number
bg.less_equal.description=True if the first number is less or equal to the second number
bg.not_equal.description=True if the first number is not equal to the second number
bg.not_equal_digital.description=True if the first number is not equal to the second number
bg.and.description=True if both of the two conditions are true.
bg.or.description=True if one or both of the two conditions are true.
bg.not.description=The opposite of
bg.equal_poly.description=True if first character is equal to the second character
bg.not_equal_poly.description=True if first character is not equal to the second character
bg.millis.description=milliseconds since last power-up or reset. Note: Use a 'Large Integer' variable.
bg.true.description=Boolean True.
bg.false.description=Boolean False.
bg.digital-high.description=Pin HIGH
bg.digital-low.description=Pin LOW
bg.char.description=Character constant
bg.number.description=Standard integer constant. 32,768 to +32,767
bg.number_long.description=Large integer constant. 0 to 4,294,967,295
bg.number_double.description='Decimal' number constant. +/- 3.4028235E+38
bg.variable_number.description=Standard integer variable. -32,768 to +32,767
bg.variable_number_unsigned_long.description=Large integer variable name
bg.variable_number_double.description='Decimal' variable name
bg.variable_digital.description=Digital variable
bg.setter_variable_number.description=Set standard integer variable. -32,768 to +32,767
bg.setter_variable_number_unsigned_long.description=Set large integer variable. 0 to 4,294,967,295
bg.setter_variable_number_double.description=Set 'Decimal' variable. +/- 3.4028235E+38
bg.setter_variable_digital.description=Set digital variable
bg.variable_vector.description=Get the value of an array member
bg.create_variable_vector.description=Create an array of standard integers. -32,768 to +32,767
bg.setter_variable_vector.description=Set the value of an array member
bg.setter_variable_char.description=Set a character variable
bg.variable_poly.description=Character variable name
bg.servo.description=Control a servo
bg.servo_sg90.description=Control an SG90 servo
bg.servo_mg996r.description=Control an MG996R servo
bg.servo_default.description=Control a servo
bg.ultrasonic.description=Ultrasonic distance sensor
bg.LCD_I2C_Sainsmart_20by4.description= Sainsmart LCD Display. I2C. 20 Char by 4 Lines
bg.LCD_I2C_Sainsmart_16by2.description= Sainsmart LCD Display. I2C. 16 Char by 2 Lines
bg.LCD_PLL_Sainsmart_16by2.description= Sainsmart LCD Display. Parallel. 16 Char by 2 Lines
bg.LCD_command_clear.description=Clear an LCD display
bg.LCD_command_home.description=LCD display home
bg.LCD_command_lightOn.description=LCD display light on.
bg.LCD_command_lightOff.description=LCD display light off
bg.LCD_command_cursorOn.description=LCD display cursor on.
bg.LCD_command_cursorOff.description=LCD display cursor off
bg.LCD_command_blinkOn.description=LCD display blink on.
bg.LCD_command_blinkOff.description=LCD display blink off
bg.serial_print.description=Send message via Serial port
bg.message.description=Text message
bg.glue_sn.description=Glue number to string
bg.glue_sb.description=Glue boolean to string
bg.glue_poly.description=Glue char to string
bg.wire_write.description=Write data via I2C
bg.wire_read.description=Read data from i2c
bg.wire_isread.description=Is last read from I2C success?
bg.eeprom_read.description=Read a byte (0-255) from EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_write.description=Write a byte (0-255) to EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_read_int.description=Read an int (+/- 32,767) from EEPROM. NOTE: DON'T read from consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_write_int.description=Write an int (+/- 32,767) to EEPROM. NOTE: DON'T write to consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_read_long.description=Read a 'long' (0 - 4,294,967,295) from EEPROM. NOTE: DON'T read from consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.eeprom_write_long.description=Write a 'long' (0 - 4,294,967,295) to EEPROM. NOTE: DON'T write to consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.sd_write2.description=Write to SD card
bg.code_loop.description=Add raw codes to loop()
bg.code_head.description=Add raw codes to head
bg.code_setup.description=Add raw codes to setup()
bg.glue_msg.description=Glue a text message
bg.variable_fake.description=Digital Var				
bg.serial_println.description=Send message via Serial port with a return

bg.ls_10mmLEDModule.description=10mm Blue/Green/Yellow/Red LED Module
bg.ls_5mmLEDModule.description=5mm Blue/Green/Yellow/Red LED Module
bg.ls_AccelerometerModule_x.description=Based on the excellent ADXL-345, this digital 3-axis accelerometer has excellent EMI protection.
bg.ls_AccelerometerModule_y.description=Based on the excellent ADXL-345, this digital 3-axis accelerometer has excellent EMI protection.
bg.ls_AccelerometerModule_z.description=Based on the excellent ADXL-345, this digital 3-axis accelerometer has excellent EMI protection.
bg.ls_ButtonModule.description=Button Module
bg.ls_BuzzerModule.description=Buzzer Module
bg.ls_HallSensor.description=Hall Sensor
bg.ls_HighPowerLedModule.description=High Power Led Module
bg.ls_JoystickSensorModule_x.description=Joystick Sensor Module
bg.ls_JoystickSensorModule_y.description=Joystick Sensor Module
bg.ls_LDRModule.description=LDR Module
bg.ls_LEDBar.description=LED Bar
bg.ls_Linear-SlidePotentiometerModule.description=Linear/Slide Potentiometer Module
bg.ls_MagneticSwitch.description=Magnetic Switch
bg.ls_MosfetModule.description=Mosfet Module
bg.ls_RelayModule.description=Relay Module
bg.ls_RotaryPotentiometerModule.description=Rotary Potentiometer Module
bg.ls_RTCModule.description=RTC Module
bg.ls_SoundSensor.description=Sound Sensor
bg.ls_ThermalModule.description=Thermal Module
bg.ls_TiltModule.description=Tilt Module
bg.ls_TouchSensorModule.description=Touch Sensor Module
bg.random_range.description=Generate random number between min and (max - 1)

bd.makeblock=Makeblock
bc.shutter_state=Action
bc.port_number=PORT_#
bc.motor_number=M#
bc.command_number=Type
bc.speed_number=Speed
bc.acceleration_number=Acceler
bc.moveTo_number=MoveTo
bc.angle_number=Angle
bc.input_data=Data
bc.device_number=Device
bc.output_data=Data
bc.commands_data=Commands
bc.stepper_finish=Finish
bc.me_key_down=KeyDown
bc.me_key_up=KeyUp
bg.me_port_1=PORT 1
bg.me_port_1.description= Me Base Shield Port
bg.me_port_2=PORT 2
bg.me_port_3=PORT 3
bg.me_port_4=PORT 4
bg.me_port_5=PORT 5
bg.me_port_6=PORT 6
bg.me_port_7=PORT 7
bg.me_port_8=PORT 8
bg.me_motor_1=M1
bg.me_motor_1.description= Me Base Shield DC Motor Port
bg.me_motor_2=M2
bg.me_shutter_1=Shot On
bg.me_shutter_1.description= Me Shutter Action
bg.me_shutter_2=Shot Off
bg.me_shutter_3=Focus On
bg.me_shutter_4=Focus Off
bg.me_ultrasonic_sensor= 
bg.me_ultrasonic_sensor.description=return distance between Object to Sensor.
bg.me_linefinder= 
bg.me_linefinder.description=return 0-3 for Left And Right Side State.
bg.me_limitswitch= 
bg.me_limitswitch.description=It sends a signal to the controller when it is triggered. 
bg.me_shutter= 
bg.me_shutter.description=It sends a signal to the DSLR Camera for shot and focus.
bg.me_motordriver= 
bg.me_motordriver.description=Motor can use M1,M2,Port_1 and Port_2.
bg.me_servodriver= 
bg.me_servodriver.description=Servo can use Port_1 and Port_2,device can use 1 and 2.
bg.me_stepper_motor= 
bg.me_stepper_motor.description=Mini stepper motor driver base on A4988.Compatible with 4 and 6 wire stepper motors.
bg.me_infraredreceiver= 
bg.me_infraredreceiver.description=Receive Data from Infrared Controller
bg.me_bluetooth_read= 
bg.me_bluetooth_read.description=Bluetooth Read Byte Data
bg.me_bluetooth_write= 
bg.me_bluetooth_write.description=Bluetooth Write Byte Data
bg.me_bluetooth_commands = 
bg.me_bluetooth_commands.description=Commands Parser For Android App's Communication.  
bg.me_bluetooth_command = 
bg.me_bluetooth_command.description=return (0:module,1:device ID,2:mode,3:port,4:value)

#workshop blocks 
bd.workshop=Workshop template
bg.ws_setting=Setting
bg.ws_setting.description=setup a robot
bg.ws_go_forward=Go
bg.ws_go_forward.description=go forward
bg.ws_go_backward=Back
bg.ws_go_backward.description=go backward
bg.ws_stop=Stop
bg.ws_stop.description=stop moving
bg.ws_turn_left=Turn left
bg.ws_turn_left.description=turn left
bg.ws_turn_right=Turn Right
bg.ws_turn_right.description=turn right
bg.ws_go_forward_left=Go Left
bg.ws_go_forward_left.description=go forward left
bg.ws_go_forward_right=Go Right
bg.ws_go_forward_right.description=go forward right
bg.ws_go_backward_left=Back Left
bg.ws_go_backward_left.description=go back left
bg.ws_go_backward_right=Back Right
bg.ws_go_backward_right.description=go back right
bg.ws_light=Light
bg.ws_light.description=stop moving
bg.ws_scan=Scan
bg.ws_scan.description=Scan an obstacle
bg.ws_music=Music
bg.ws_music.description=play music
bg.ws_wireless=Wrieless
bg.ws_wireless.description=Wireless
bg.ws_danger=In Danger
bg.ws_danger.description=is robot in danger?
bg.ws_binoculars=Binoculars
bg.ws_binoculars.description=Binoculars

#legacy support
bg.loop1=loop
bg.loop1.description=loop
bg.loop2=loop
bg.loop2.description=loop
bg.loop3=loop
bg.loop3.description=loop

# My Additions
bd.my_blocks=ECS

bc.note=note
bg.play_note_block=Play Note
bg.play_note_block.description=Play a musical note
bg.play_note_time_block=Play Note Time
bg.play_note_time_block.description=Play a musical note for a specified amount of time

bg.play_frequency_block=Play Frequency
bg.play_frequency_block.description=Play a musical frequency
bg.play_frequency_time_block=Play Frequency Time
bg.play_frequency_time_block.description=Play a musical frequency for a specified amount of time

bg.ecs_no_tone=No Tone
bg.ecs_no_tone.description=Stop playing music from the speaker

bg.ECS_LED_on=Turn LED On
bg.ECS_LED_on.description=Turn an LED on
bg.ECS_LED_on_1=Turn LED 1 On
bg.ECS_LED_on_1.description=Turn LED 1 on (red)
bg.ECS_LED_on_2=Turn LED 2 On
bg.ECS_LED_on_2.description=Turn LED 2 on (yellow)
bg.ECS_LED_on_3=Turn LED 3 On
bg.ECS_LED_on_3.description=Turn LED 3 on (white)
bg.ECS_LED_on_4=Turn LED 4 On
bg.ECS_LED_on_4.description=Turn LED 4 on (green)

bg.ECS_LED_off=Turn LED Off
bg.ECS_LED_off.description=Turn an LED off
bg.ECS_LED_off_1=Turn LED 1 Off
bg.ECS_LED_off_1.description=Turn LED 1 off (red)
bg.ECS_LED_off_2=Turn LED 2 Off
bg.ECS_LED_off_2.description=Turn LED 2 off (yellow)
bg.ECS_LED_off_3=Turn LED 3 Off
bg.ECS_LED_off_3.description=Turn LED 3 off (white)
bg.ECS_LED_off_4=Turn LED 4 Off
bg.ECS_LED_off_4.description=Turn LED 4 off (green)

bg.read_distance_block=Get Distance
bg.read_distance_block.description=Read and return ultrasonic distance sensor value

bg.button_pressed_block=Button Pressed
bg.button_pressed_block.description=Check if a button is pressed
bg.button_pressed_pin_block=Button Pressed
bg.button_pressed_pin_block.description=Check if a button on a pin is pressed

bg.tone=Play Frequency
bg.tone.description=Play a musical frequency on a pin
bg.tone_time=Play Frequency Time
bg.tone_time.description=Play a musical frequency on a pin for a specified amount of time
bg.no_tone.description=Stop playing music from a speaker on a pin
bg.tone_note=Play Note
bg.tone_note.description=Play a musical note on a pin
bg.tone_note_time=Play Note Time
bg.tone_note_time.description=Play a musical note on a pin for a specified amount of time

bg.keyboard_setup=Set Up Keyboard
bg.keyboard_setup.description=Perform setup for communication with host keyboard
bg.update_keyboard=Update Keyboard
bg.update_keyboard.description=Update which keys are being pressed on the host keyboard
bg.is_key_pressed=Key Pressed
bg.is_key_pressed.description=Check if a key is pressed


